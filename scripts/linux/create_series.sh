#!/bin/bash

#----------------------------------------------------------------
# 使い方を表示する関数
#----------------------------------------------------------------
usage() {
  echo "使い方 $0 \"<テンプレート>\" [-s <開始>] -e <終了> [オプション...]"
  echo ""
  echo "必須"
  echo "  -e <終了値> 連番の終了値"
  echo ""
  echo "任意"
  echo "  -s <開始値> 連番の開始値（省略時は1）"
  echo "  -t <ステップ> 連番の増分（省略時は1）"
  echo "  -z <桁数> ゼロ埋め桁数 例 -z 3 -> 001 002 003"
  echo "  -p <プレースホルダ> テンプレート内で置き換える文字（省略時はi）"
  echo "  -f ファイルを作成します（省略時はディレクトリ）"
  echo "  -d <パス> 作成先ディレクトリ（省略時はカレントディレクトリ）"
  echo "  -n ドライラン 実際には作成せず、何ができるか表示します"
  echo ""
  echo "例"
  echo "  $0 \"第i回\" -s 1 -e 5"
  echo "  $0 \"第i回\" -e 5 -n    # ドライランで実行結果だけを表示します"
  echo "  $0 \"Day_i\" -s 1 -e 4 -t 2    # 2刻みで1と3の連番を作成します"
  echo "  $0 \"File_X.txt\" -s 1 -e 3 -f -p X    # ファイルを作成します"
  echo ""
  echo "すべてのオプションを併用した例"
  echo "  $0 \"Example_i.txt\" -s 1 -e 5 -t 2 -z 3 -p i -f -d output_dir -n"
  echo "上記の例ではoutput_dirというディレクトリの中にExample_001.txt Example_003.txt Example_005.txtなどのファイルを作成する予定です"
}

#----------------------------------------------------------------
# デフォルト値
#----------------------------------------------------------------
start=1
end=""
step=1
zero_pad=0
placeholder="i"
make_file=false
dest_dir="."
dry_run=false

#----------------------------------------------------------------
# 引数のチェック
#----------------------------------------------------------------
if [ $# -lt 1 ]; then
  echo "エラー テンプレート文字列を指定してください" 1>&2
  usage
  exit 1
fi

template="$1"
shift

#----------------------------------------------------------------
# オプション解析
#----------------------------------------------------------------
while getopts "s:e:t:z:p:fd:n" opt; do
  case "$opt" in
    s) start="$OPTARG" ;;
    e) end="$OPTARG" ;;
    t) step="$OPTARG" ;;
    z) zero_pad="$OPTARG" ;;
    p) placeholder="$OPTARG" ;;
    f) make_file=true ;;
    d) dest_dir="$OPTARG" ;;
    n) dry_run=true ;;
    *)
      usage
      exit 1
      ;;
  esac
done

#----------------------------------------------------------------
# 必須項目チェック
#----------------------------------------------------------------
if [ -z "$end" ]; then
  echo "エラー -e 終了値 は必須です" 1>&2
  usage
  exit 1
fi

#----------------------------------------------------------------
# 数値判定
#----------------------------------------------------------------
if ! [[ "$start" =~ ^-?[0-9]+$ ]]; then
  echo "エラー -s 開始値 には整数を指定してください 現在の値は $start です" 1>&2
  exit 1
fi

if ! [[ "$end" =~ ^-?[0-9]+$ ]]; then
  echo "エラー -e 終了値 には整数を指定してください 現在の値は $end です" 1>&2
  exit 1
fi

if ! [[ "$step" =~ ^-?[0-9]+$ ]]; then
  echo "エラー -t ステップ には整数を指定してください 現在の値は $step です" 1>&2
  exit 1
fi

#----------------------------------------------------------------
# start > end かつ step > 0 の場合のエラー例
#----------------------------------------------------------------
if [ "$start" -gt "$end" ] && [ "$step" -gt 0 ]; then
  echo "エラー startが $start endが $end で stepが正の値 $step のため連番が生成されません" 1>&2
  exit 1
fi

#----------------------------------------------------------------
# テンプレートにプレースホルダがない場合の注意
#----------------------------------------------------------------
if [[ "$template" != *"$placeholder"* ]]; then
  echo "注意 テンプレート内にプレースホルダ $placeholder が含まれていません"
  echo "置き換えは行われない可能性があります"
fi

#----------------------------------------------------------------
# 作成する名前の一覧を生成
#----------------------------------------------------------------
names=()
for i in $(seq "$start" "$step" "$end"); do
  if [ "$zero_pad" -gt 0 ]; then
    num=$(printf "%0*d" "$zero_pad" "$i")
  else
    num="$i"
  fi
  new_name="${template//$placeholder/$num}"
  names+=("$new_name")
done

#----------------------------------------------------------------
# ドライランかどうかで処理を分ける
#----------------------------------------------------------------
if $dry_run; then
  echo "ドライランモードです 実際には作成しません"
  echo "ディレクトリ $dest_dir に以下の$( $make_file && echo "ファイル" || echo "ディレクトリ" )を作成する予定です"
  for n in "${names[@]}"; do
    echo "  $n"
  done
else
  echo "ディレクトリ $dest_dir に以下の$( $make_file && echo "ファイル" || echo "ディレクトリ" )を作成します"
  for n in "${names[@]}"; do
    echo "  $n"
  done

  echo "-----"
  echo "作成を開始します"

  for n in "${names[@]}"; do
    target_path="${dest_dir}/${n}"

    if $make_file; then
      mkdir -p "$(dirname "$target_path")" 2>/dev/null
      touch "$target_path"
      echo "[FILE] $target_path を作成しました"
    else
      mkdir -p "$target_path"
      echo "[DIR]  $target_path を作成しました"
    fi
  done
fi
